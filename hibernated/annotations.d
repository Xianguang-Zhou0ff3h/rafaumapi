/**
 * HibernateD - Object-Relation Mapping for D programming language, with interface similar to Hibernate. 
 * 
 * Hibernate documentation can be found here:
 * $(LINK http://hibernate.org/docs)$(BR)
 * 
 * Source file hibernated/annotations.d.
 *
 * This module contains declarations of HibernateD Annotations - User Defined Attribues used to markup D classes and their properties for ORM.
 * 
 * Copyright: Copyright 2013
 * License:   $(LINK www.boost.org/LICENSE_1_0.txt, Boost License 1.0).
 * Author:   Vadim Lopatin
 */
module hibernated.annotations;

/** 
 * Class level annotations.
 * 
 * HibernateD maps values of some class to DB table. This class is referred as Entity.
 * 
 * Entity contains one or more properties - which are usually mapped to DB table columns.
 * 
 */

/**
 * Mark class with this annotation if you want to make it persistable.
 * @Entity or @Entity() - marks class as entity, using class name as entity name.
 * @Entity("CustomEntityName") - marks class as entity with specified entity name.
 */
struct Entity {
	immutable string name;
	this(string name) { this.name = name; }
}

/**
 * @Embeddable or @Embeddable() - mark class as entity which can only be embedded into other entities, and doesn't have separate columns.
 * Columns for each of Embeddable entity properties will be placed into parent entity's table, where this embeddable entity is @Embedded
 */
struct Embeddable {
	immutable bool dummy;
	this(bool enabled) {}
}

/**
 * Use to specify table name for entity.
 * @Table("table_name") - specifies table name to store entity in, different from default generated.
 * If this annotation not present, table name will be autogenerated as lowercase entity name with conversion of 
 * CamelCaseEntityName to camel_case_entity_name.
 */
struct Table {
	immutable string name;
	this(string name) { this.name = name; }
}

/** 
 * Property level annotations.
 * 
 * Supported simple types for properties (may be stored in single DB table column):
 *     byte, short, int, long, ubyte, ushort, uint, ulong, byte[], ubyte[], string, DateTime, Date, TimeOfDay
 * 
 * Other possible types of properties:
 *     Embeddable entity class -- implementation in progress
 *     Entity class -- ManyToOne or OneToOne relation -- TODO
 *     Entity class collection -- OneToMany or ManyToMany -- TODO
 * 
 * Supported kinds of property holders:
 *     field -- just public field
 *     @property -- D language read/write property
 *     getField()/setField(x) method pair
 * 
 * Each entity property has a name. It's derived from field, @property or getter/setter name.
 * For field and D @property - name of field of property is used as name of entity property, with first letter lowercased.
 * For getters/setters, get/set/is prefix is removed from mothod name, and the rest with lowercased first letter is used as property name.
 */

/**
 * Mark property as simple persistent property (must be of one of simple types).
 * 
 * @Column or @Column() - simple column, with name and nullability derived from field/property name.
 * @Column("column_name") - simple column with specified name, nullability will be derived from field/property.
 * @Column("column_name", field_length) - simple column with specified name and length (e.g. for varchar), nullability will be derived from field/property.
 * @Column("column_name", field_length, nullable) - simple column with specified column name, length and nullability.
 * @Column("column_name", nullable) - simple column with specified column name and nullability, of default length.
 * 
 * If column name is not specified, lowercased name of property is used as column name.
 * TODO: convert camelCasePropertyName to camel_case_property_name column name instead of camelcasepropertyname.
 */
struct Column {
	immutable string name;
	immutable int length;
	immutable bool nullable;
	immutable bool unique;
	this(string name) { this.name = name; }
	this(string name, int length) { this.name = name; this.length = length; }
	this(string name, int length, bool nullable) { this.name = name; this.length = length; this.nullable = nullable; }
	this(string name, bool nullable) { this.name = name; this.nullable = nullable; }
	this(string name, int length, bool nullable, bool unique) { this.name = name; this.length = length; this.nullable = nullable; this.unique = unique; }
	this(string name, bool nullable, bool unique) { this.name = name; this.nullable = nullable; this.unique = unique; }
}

/**
 * @Id or @Id() - mark simple property as primary key of entity.
 */
struct Id {
	immutable bool dummy;
	this(bool enabled) {}
}

/**
 * @Generated or @Generated() - mark simple property as column as server generated value (e.g. AUTO INCREMENT field)
 */
struct Generated {
	immutable bool dummy;
	this(bool enabled) {}
}

/**
 * @Embedded or @Embedded() - mark entity property 
 * Columns for each of Embeddable entity properties will be placed into parent entity's table, where this embeddable entity is @Embedded
 */
struct Embedded {
	immutable bool dummy;
	this(bool enabled) {}
}


/*
struct JoinColumn {
	immutable string name;
	this(string name) { this.name = name; }
}

struct DynamicInsert {
	immutable bool enabled;
	this(bool enabled) { this.enabled = enabled; }
}

struct DynamicUpdate {
	immutable bool enabled;
	this(bool enabled) { this.enabled = enabled; }
}
  */

unittest {

	@Entity
	@Table("user")
	class User {

		@Id @Generated
		@Column("id")
		int id;

		@Column("name")
		string name;
	}

}

language: d

# start most recent dmd and ldc first, then older versions. (don't bother with pre-release')
# For available compilers see: https://semitwist.com/travis-d-compilers
d:
  - ldc
  - dmd
  - dmd-2.087.0
  - dmd-2.086.1
  - dmd-2.085.1
  - dmd-2.084.1
  - dmd-2.083.1
  - dmd-2.082.1
  - ldc-1.17.0 # eq to dmd v2.087
  - ldc-1.16.0 # eq to dmd v2.086.1
  - ldc-1.15.0 # eq to dmd v2.085.1
  - ldc-1.14.0 # eq to dmd v2.084.1
  - ldc-1.13.0 # eq to dmd v2.083.1
  - ldc-1.12.0 # eq to dmd v2.082.1

script:
  - dub build --config=full --compiler=${DC}
  - dub run --config=test --compiler=${DC}

addons:
  apt:
    update: true
    sources:
      - ubuntu-toolchain-r-test
    packages:
      - libevent-dev
      - libsqlite3-dev
      - gcc-6
  homebrew:
    brewfile: true

# GDC versions need to be setup with correct version of gcc
# The integration tests can only run in Linux container
jobs:
  include:
    - stage: test
      d: dmd-beta
    - d: gdc
    - stage: Mac builds
      d: dmd
      os: osx
    - d: ldc
      os: osx

    - stage: SQLite Integration Tests
      d: dmd
      script:
        - dub test --config=SQLite
        - dub run --config=test
        - cd example && dub build && ./ddbctest --connection=sqlite:ddbc-test.sqlite

    - stage: MySQL Integration Tests
      env: NAME="MySQL Integration Test with DUB upgrade"
      d: dmd
      services: mysql
      before_script:
        - mysql --user=travis -e 'CREATE DATABASE IF NOT EXISTS testdb;'
        - mysql --user=travis -e 'CREATE DATABASE IF NOT EXISTS ddbctest;'
      script:
        - dub upgrade
        - dub test --config=MySQL
        - cd example && dub build --config=MySQL && ./ddbctest --connection=mysql:127.0.0.1 --database=ddbctest --user=travis
    - env: NAME="MySQL Integration Tests"
      d: dmd
      services: mysql
      before_script:
        - mysql --user=travis -e 'CREATE DATABASE IF NOT EXISTS testdb;'
        - mysql --user=travis -e 'CREATE DATABASE IF NOT EXISTS ddbctest;'
      script:
        - dub test --config=MySQL
        - cd example && dub build --config=MySQL && ./ddbctest --connection=mysql:127.0.0.1 --database=ddbctest --user=travis

    - stage: PostgreSQL Integration Tests
      d: dmd
      services: postgresql
      before_script:
        - psql -c 'create database testdb;' -U postgres
        - psql -c 'create database ddbctest;' -U postgres
      script:
        - dub test --config=PGSQL
        - cd example && dub build --config=PGSQL && ./ddbctest --connection=postgresql:127.0.0.1 --database=ddbctest --user=postgres

    - stage: MS SQL Integration Tests
      d: dmd
      services: docker
      addons:
        apt:
          update: true
          sources: ubuntu-toolchain-r-test
          packages: [ libevent-dev, unixodbc, unixodbc-dev, freetds-bin, freetds-dev, tdsodbc ]
      before_install:
        - docker pull microsoft/mssql-server-linux:2017-latest
        - docker run -e 'ACCEPT_EULA=Y' -e 'SA_PASSWORD=bbk4k77JKH88g54' -p 1433:1433 --name ms-sql -d microsoft/mssql-server-linux
      before_script:
        - odbcinst -j
        - cat /etc/odbcinst.ini
        - docker exec -it ms-sql /opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P "bbk4k77JKH88g54" -Q 'CREATE DATABASE ddbctest'
      script:
        - dub test --config=ODBC
        - cd example && dub build --config=ODBC && ./ddbctest --connection=odbc://localhost --database=ddbctest --user=SA --password=bbk4k77JKH88g54
  allow_failures:
    - stage: MS SQL Integration Tests
    - d: dmd-beta
    - d: gdc
